{"version":3,"sources":["@traceur/generated/TemplateParser/5368","angular2/src/change_detection/change_detection_jit_generator.es6","angular2/src/change_detection/@traceur/generated/TemplateParser/24","angular2/src/change_detection/@traceur/generated/TemplateParser/23","angular2/src/change_detection/@traceur/generated/TemplateParser/25","angular2/src/change_detection/@traceur/generated/TemplateParser/26","angular2/src/change_detection/change_detection_jit_generator.js","angular2/src/change_detection/@traceur/generated/TemplateParser/37","@traceur/generated/TemplateParser/5367","@traceur/generated/TemplateParser/5366","@traceur/generated/TemplateParser/5371","@traceur/generated/TemplateParser/5369","@traceur/generated/TemplateParser/5373"],"names":[],"mappings":"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","file":"angular2/src/change_detection/change_detection_jit_generator.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {isPresent, isBlank, BaseException, Type} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {AbstractChangeDetector} from './abstract_change_detector';\nimport {ChangeDetectionUtil} from './change_detection_util';\n\nimport {\n  ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_LOCAL,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_PIPE,\n  RECORD_TYPE_INTERPOLATE\n  } from './proto_record';\n\n/**\n * The code generator takes a list of proto records and creates a function/class\n * that \"emulates\" what the developer would write by hand to implement the same\n * kind of behaviour.\n *\n * For example: An expression `address.city` will result in the following class:\n *\n * var ChangeDetector0 = function ChangeDetector0(dispatcher, protos) {\n *   AbstractChangeDetector.call(this);\n *   this.dispatcher = dispatcher;\n *   this.protos = protos;\n *\n *   this.context = ChangeDetectionUtil.unitialized();\n *   this.address0 = ChangeDetectionUtil.unitialized();\n *   this.city1 = ChangeDetectionUtil.unitialized();\n * }\n * ChangeDetector0.prototype = Object.create(AbstractChangeDetector.prototype);\n *\n * ChangeDetector0.prototype.detectChangesInRecords = function(throwOnChange) {\n *   var address0;\n *   var city1;\n *   var change;\n *   var changes = null;\n *   var temp;\n *   var context = this.context;\n *\n *   address0 = context.address;\n *   if (address0 !== this.address0) {\n *     this.address0 = address0;\n *   }\n *\n *   city1 = address0.city;\n *   if (city1 !== this.city1) {\n *     changes = ChangeDetectionUtil.addRecord(changes,\n *       ChangeDetectionUtil.simpleChangeRecord(this.protos[1].bindingMemento, this.city1, city1));\n *     this.city1 = city1;\n *   }\n *\n *   if (changes.length > 0) {\n *     if(throwOnChange) ChangeDetectionUtil.throwOnChange(this.protos[1], changes[0]);\n *     this.dispatcher.onRecordChange('address.city', changes);\n *     changes = null;\n *   }\n * }\n *\n *\n * ChangeDetector0.prototype.hydrate = function(context, locals) {\n *   this.context = context;\n *   this.locals = locals;\n * }\n *\n * ChangeDetector0.prototype.dehydrate = function(context) {\n *   this.context = ChangeDetectionUtil.unitialized();\n *   this.address0 = ChangeDetectionUtil.unitialized();\n *   this.city1 = ChangeDetectionUtil.unitialized();\n *   this.locals = null;\n * }\n *\n * ChangeDetector0.prototype.hydrated = function() {\n *   return this.context !== ChangeDetectionUtil.unitialized();\n * }\n *\n * return ChangeDetector0;\n *\n *\n * The only thing the generated class depends on is the super class AbstractChangeDetector.\n *\n * The implementation comprises two parts:\n * * ChangeDetectorJITGenerator has the logic of how everything fits together.\n * * template functions (e.g., constructorTemplate) define what code is generated.\n*/\n\nvar ABSTRACT_CHANGE_DETECTOR = \"AbstractChangeDetector\";\nvar UTIL = \"ChangeDetectionUtil\";\nvar DISPATCHER_ACCESSOR = \"this.dispatcher\";\nvar PIPE_REGISTRY_ACCESSOR = \"this.pipeRegistry\";\nvar PROTOS_ACCESSOR = \"this.protos\";\nvar CONTEXT_ACCESSOR = \"this.context\";\nvar CHANGE_LOCAL = \"change\";\nvar CHANGES_LOCAL = \"changes\";\nvar LOCALS_ACCESSOR = \"this.locals\";\nvar TEMP_LOCAL = \"temp\";\n\nfunction typeTemplate(type:string, cons:string, detectChanges:string, setContext:string):string {\n  return `\n${cons}\n${detectChanges}\n${setContext};\n\nreturn function(dispatcher, pipeRegistry) {\n  return new ${type}(dispatcher, pipeRegistry, protos);\n}\n`;\n}\n\nfunction constructorTemplate(type:string, fieldsDefinitions:string):string {\n  return `\nvar ${type} = function ${type}(dispatcher, pipeRegistry, protos) {\n${ABSTRACT_CHANGE_DETECTOR}.call(this);\n${DISPATCHER_ACCESSOR} = dispatcher;\n${PIPE_REGISTRY_ACCESSOR} = pipeRegistry;\n${PROTOS_ACCESSOR} = protos;\n${fieldsDefinitions}\n}\n\n${type}.prototype = Object.create(${ABSTRACT_CHANGE_DETECTOR}.prototype);\n`;\n}\n\nfunction pipeOnDestroyTemplate(pipeNames:List) {\n  return pipeNames.map((p) => `${p}.onDestroy()`).join(\"\\n\");\n}\n\nfunction hydrateTemplate(type:string, fieldsDefinitions:string, pipeOnDestroy:string):string {\n  return `\n${type}.prototype.hydrate = function(context, locals) {\n  ${CONTEXT_ACCESSOR} = context;\n  ${LOCALS_ACCESSOR} = locals;\n}\n${type}.prototype.dehydrate = function() {\n  ${pipeOnDestroy}\n  ${fieldsDefinitions}\n  ${LOCALS_ACCESSOR} = null;\n}\n${type}.prototype.hydrated = function() {\n  return ${CONTEXT_ACCESSOR} !== ${UTIL}.unitialized();\n}\n`;\n}\n\nfunction detectChangesTemplate(type:string, body:string):string {\n  return `\n${type}.prototype.detectChangesInRecords = function(throwOnChange) {\n  ${body}\n}\n`;\n}\n\n\nfunction bodyTemplate(localDefinitions:string, changeDefinitions:string, records:string):string {\n  return `\n${localDefinitions}\n${changeDefinitions}\nvar ${TEMP_LOCAL};\nvar ${CHANGE_LOCAL};\nvar ${CHANGES_LOCAL} = null;\n\ncontext = ${CONTEXT_ACCESSOR};\n${records}\n`;\n}\n\nfunction notifyTemplate(index:number):string{\n  return  `\nif (${CHANGES_LOCAL} && ${CHANGES_LOCAL}.length > 0) {\n  if(throwOnChange) ${UTIL}.throwOnChange(${PROTOS_ACCESSOR}[${index}], ${CHANGES_LOCAL}[0]);\n  ${DISPATCHER_ACCESSOR}.onRecordChange(${PROTOS_ACCESSOR}[${index}].directiveMemento, ${CHANGES_LOCAL});\n  ${CHANGES_LOCAL} = null;\n}\n`;\n}\n\nfunction pipeCheckTemplate(context:string, pipe:string, pipeType:string,\n                                  value:string, change:string, addRecord:string, notify:string):string{\n  return `\nif (${pipe} === ${UTIL}.unitialized()) {\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n} else if (!${pipe}.supports(${context})) {\n  ${pipe}.onDestroy();\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n}\n\n${CHANGE_LOCAL} = ${pipe}.transform(${context});\nif (! ${UTIL}.noChangeMarker(${CHANGE_LOCAL})) {\n  ${value} = ${CHANGE_LOCAL};\n  ${change} = true;\n  ${addRecord}\n}\n${notify}\n`;\n}\n\nfunction referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {\n  return `\n${assignment}\nif (${newValue} !== ${oldValue} || (${newValue} !== ${newValue}) && (${oldValue} !== ${oldValue})) {\n  ${change} = true;\n  ${addRecord}\n  ${oldValue} = ${newValue};\n}\n${notify}\n`;\n}\n\nfunction assignmentTemplate(field:string, value:string) {\n  return `${field} = ${value};`;\n}\n\nfunction localDefinitionsTemplate(names:List):string {\n  return names.map((n) => `var ${n};`).join(\"\\n\");\n}\n\nfunction changeDefinitionsTemplate(names:List):string {\n  return names.map((n) => `var ${n} = false;`).join(\"\\n\");\n}\n\nfunction fieldDefinitionsTemplate(names:List):string {\n  return names.map((n) => `${n} = ${UTIL}.unitialized();`).join(\"\\n\");\n}\n\nfunction ifChangedGuardTemplate(changeNames:List, body:string):string {\n  var cond = changeNames.join(\" || \");\n  return `\nif (${cond}) {\n  ${body}\n}\n`;\n}\n\nfunction addSimpleChangeRecordTemplate(protoIndex:number, oldValue:string, newValue:string) {\n  return `${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.simpleChangeRecord(${PROTOS_ACCESSOR}[${protoIndex}].bindingMemento, ${oldValue}, ${newValue}));`;\n}\n\n\nexport class ChangeDetectorJITGenerator {\n  typeName:string;\n  records:List<ProtoRecord>;\n  localNames:List<String>;\n  changeNames:List<String>;\n  fieldNames:List<String>;\n  pipeNames:List<String>;\n\n  constructor(typeName:string, records:List<ProtoRecord>) {\n    this.typeName = typeName;\n    this.records = records;\n\n    this.localNames = this.getLocalNames(records);\n    this.changeNames = this.getChangeNames(this.localNames);\n    this.fieldNames = this.getFieldNames(this.localNames);\n    this.pipeNames = this.getPipeNames(this.localNames);\n  }\n\n  getLocalNames(records:List<ProtoRecord>):List<String> {\n    var index = 0;\n    var names = records.map((r) => {\n      var sanitizedName = r.name.replace(new RegExp(\"\\\\W\", \"g\"), '');\n      return `${sanitizedName}${index++}`\n    });\n    return [\"context\"].concat(names);\n  }\n\n  getChangeNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `change_${n}`);\n  }\n\n  getFieldNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `this.${n}`);\n  }\n\n  getPipeNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `this.${n}_pipe`);\n  }\n\n  generate():Function {\n    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genHydrate());\n    return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', text)(AbstractChangeDetector, ChangeDetectionUtil, this.records);\n  }\n\n  genConstructor():string {\n    return constructorTemplate(this.typeName, this.genFieldDefinitions());\n  }\n\n  genHydrate():string {\n    return hydrateTemplate(this.typeName, this.genFieldDefinitions(),\n      pipeOnDestroyTemplate(this.getnonNullPipeNames()));\n  }\n\n  genFieldDefinitions() {\n    var fields = [];\n    fields = fields.concat(this.fieldNames);\n    fields = fields.concat(this.getnonNullPipeNames());\n    return fieldDefinitionsTemplate(fields);\n  }\n\n  getnonNullPipeNames():List<String> {\n    var pipes = [];\n    this.records.forEach((r) => {\n      if (r.mode === RECORD_TYPE_PIPE) {\n        pipes.push(this.pipeNames[r.selfIndex]);\n      }\n    });\n    return pipes;\n  }\n\n  genDetectChanges():string {\n    var body = this.genBody();\n    return detectChangesTemplate(this.typeName, body);\n  }\n\n  genBody():string {\n    var rec = this.records.map((r) => this.genRecord(r)).join(\"\\n\");\n    return bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec);\n  }\n\n  genLocalDefinitions():string {\n    return localDefinitionsTemplate(this.localNames);\n  }\n\n  genChangeDefinitions():string {\n    return changeDefinitionsTemplate(this.changeNames);\n  }\n\n  genRecord(r:ProtoRecord):string {\n    if (r.mode === RECORD_TYPE_PIPE) {\n      return this.genPipeCheck (r);\n    } else {\n      return this.genReferenceCheck(r);\n    }\n  }\n\n  genPipeCheck(r:ProtoRecord):string {\n    var context = this.localNames[r.contextIndex];\n    var pipe = this.pipeNames[r.selfIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n\n    return pipeCheckTemplate(context, pipe, r.name, newValue, change, addRecord, notify);\n  }\n\n  genReferenceCheck(r:ProtoRecord):string {\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var assignment = this.genUpdateCurrentValue(r);\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n\n    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);;\n    if (r.isPureFunction()) {\n      return this.ifChangedGuard(r, check);\n    } else {\n      return check;\n    }\n  }\n\n  genUpdateCurrentValue(r:ProtoRecord):string {\n    var context = this.localNames[r.contextIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var args = this.genArgs(r);\n\n    switch (r.mode) {\n      case RECORD_TYPE_SELF:\n        return assignmentTemplate(newValue, context);\n\n      case RECORD_TYPE_CONST:\n        return `${newValue} = ${this.genLiteral(r.funcOrValue)}`;\n\n      case RECORD_TYPE_PROPERTY:\n        return assignmentTemplate(newValue, `${context}.${r.name}`);\n\n      case RECORD_TYPE_LOCAL:\n        return assignmentTemplate(newValue, `${LOCALS_ACCESSOR}.get('${r.name}')`);\n\n      case RECORD_TYPE_INVOKE_METHOD:\n        return assignmentTemplate(newValue, `${context}.${r.name}(${args})`);\n\n      case RECORD_TYPE_INVOKE_CLOSURE:\n        return assignmentTemplate(newValue, `${context}(${args})`);\n\n      case RECORD_TYPE_PRIMITIVE_OP:\n        return assignmentTemplate(newValue, `${UTIL}.${r.name}(${args})`);\n\n      case RECORD_TYPE_INTERPOLATE:\n        return assignmentTemplate(newValue, this.genInterpolation(r));\n\n      case RECORD_TYPE_KEYED_ACCESS:\n        var key = this.localNames[r.args[0]];\n        return assignmentTemplate(newValue, `${context}[${key}]`);\n\n      default:\n        throw new BaseException(`Unknown operation ${r.mode}`);\n    }\n  }\n\n  ifChangedGuard(r:ProtoRecord, body:string):string {\n    return ifChangedGuardTemplate(r.args.map((a) => this.changeNames[a]), body);\n  }\n\n  genInterpolation(r:ProtoRecord):string{\n    var res = \"\";\n    for (var i = 0; i < r.args.length; ++i) {\n      res += this.genLiteral(r.fixedArgs[i]);\n      res += \" + \";\n      res += this.localNames[r.args[i]];\n      res += \" + \";\n    }\n    res += this.genLiteral(r.fixedArgs[r.args.length]);\n    return res;\n  }\n\n  genLiteral(value):string {\n    return JSON.stringify(value);\n  }\n\n  genNotify(r):string{\n    return r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : '';\n  }\n\n  genArgs(r:ProtoRecord):string {\n    return r.args.map((arg) => this.localNames[arg]).join(\", \");\n  }\n}\n\n\n\n\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","import {assert} from \"rtts_assert/rtts_assert\";\nimport {isPresent,\n  isBlank,\n  BaseException,\n  Type} from 'angular2/src/facade/lang';\nimport {List,\n  ListWrapper,\n  MapWrapper,\n  StringMapWrapper} from 'angular2/src/facade/collection';\nimport {AbstractChangeDetector} from './abstract_change_detector';\nimport {ChangeDetectionUtil} from './change_detection_util';\nimport {ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_LOCAL,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_PIPE,\n  RECORD_TYPE_INTERPOLATE} from './proto_record';\nvar ABSTRACT_CHANGE_DETECTOR = \"AbstractChangeDetector\";\nvar UTIL = \"ChangeDetectionUtil\";\nvar DISPATCHER_ACCESSOR = \"this.dispatcher\";\nvar PIPE_REGISTRY_ACCESSOR = \"this.pipeRegistry\";\nvar PROTOS_ACCESSOR = \"this.protos\";\nvar CONTEXT_ACCESSOR = \"this.context\";\nvar CHANGE_LOCAL = \"change\";\nvar CHANGES_LOCAL = \"changes\";\nvar LOCALS_ACCESSOR = \"this.locals\";\nvar TEMP_LOCAL = \"temp\";\nfunction typeTemplate(type, cons, detectChanges, setContext) {\n  assert.argumentTypes(type, assert.type.string, cons, assert.type.string, detectChanges, assert.type.string, setContext, assert.type.string);\n  return assert.returnType((`\n${cons}\n${detectChanges}\n${setContext};\n\nreturn function(dispatcher, pipeRegistry) {\n  return new ${type}(dispatcher, pipeRegistry, protos);\n}\n`), assert.type.string);\n}\nObject.defineProperty(typeTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction constructorTemplate(type, fieldsDefinitions) {\n  assert.argumentTypes(type, assert.type.string, fieldsDefinitions, assert.type.string);\n  return assert.returnType((`\nvar ${type} = function ${type}(dispatcher, pipeRegistry, protos) {\n${ABSTRACT_CHANGE_DETECTOR}.call(this);\n${DISPATCHER_ACCESSOR} = dispatcher;\n${PIPE_REGISTRY_ACCESSOR} = pipeRegistry;\n${PROTOS_ACCESSOR} = protos;\n${fieldsDefinitions}\n}\n\n${type}.prototype = Object.create(${ABSTRACT_CHANGE_DETECTOR}.prototype);\n`), assert.type.string);\n}\nObject.defineProperty(constructorTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction pipeOnDestroyTemplate(pipeNames) {\n  return pipeNames.map((p) => `${p}.onDestroy()`).join(\"\\n\");\n}\nObject.defineProperty(pipeOnDestroyTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction hydrateTemplate(type, fieldsDefinitions, pipeOnDestroy) {\n  assert.argumentTypes(type, assert.type.string, fieldsDefinitions, assert.type.string, pipeOnDestroy, assert.type.string);\n  return assert.returnType((`\n${type}.prototype.hydrate = function(context, locals) {\n  ${CONTEXT_ACCESSOR} = context;\n  ${LOCALS_ACCESSOR} = locals;\n}\n${type}.prototype.dehydrate = function() {\n  ${pipeOnDestroy}\n  ${fieldsDefinitions}\n  ${LOCALS_ACCESSOR} = null;\n}\n${type}.prototype.hydrated = function() {\n  return ${CONTEXT_ACCESSOR} !== ${UTIL}.unitialized();\n}\n`), assert.type.string);\n}\nObject.defineProperty(hydrateTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction detectChangesTemplate(type, body) {\n  assert.argumentTypes(type, assert.type.string, body, assert.type.string);\n  return assert.returnType((`\n${type}.prototype.detectChangesInRecords = function(throwOnChange) {\n  ${body}\n}\n`), assert.type.string);\n}\nObject.defineProperty(detectChangesTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction bodyTemplate(localDefinitions, changeDefinitions, records) {\n  assert.argumentTypes(localDefinitions, assert.type.string, changeDefinitions, assert.type.string, records, assert.type.string);\n  return assert.returnType((`\n${localDefinitions}\n${changeDefinitions}\nvar ${TEMP_LOCAL};\nvar ${CHANGE_LOCAL};\nvar ${CHANGES_LOCAL} = null;\n\ncontext = ${CONTEXT_ACCESSOR};\n${records}\n`), assert.type.string);\n}\nObject.defineProperty(bodyTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction notifyTemplate(index) {\n  assert.argumentTypes(index, assert.type.number);\n  return assert.returnType((`\nif (${CHANGES_LOCAL} && ${CHANGES_LOCAL}.length > 0) {\n  if(throwOnChange) ${UTIL}.throwOnChange(${PROTOS_ACCESSOR}[${index}], ${CHANGES_LOCAL}[0]);\n  ${DISPATCHER_ACCESSOR}.onRecordChange(${PROTOS_ACCESSOR}[${index}].directiveMemento, ${CHANGES_LOCAL});\n  ${CHANGES_LOCAL} = null;\n}\n`), assert.type.string);\n}\nObject.defineProperty(notifyTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number]];\n  }});\nfunction pipeCheckTemplate(context, pipe, pipeType, value, change, addRecord, notify) {\n  assert.argumentTypes(context, assert.type.string, pipe, assert.type.string, pipeType, assert.type.string, value, assert.type.string, change, assert.type.string, addRecord, assert.type.string, notify, assert.type.string);\n  return assert.returnType((`\nif (${pipe} === ${UTIL}.unitialized()) {\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n} else if (!${pipe}.supports(${context})) {\n  ${pipe}.onDestroy();\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n}\n\n${CHANGE_LOCAL} = ${pipe}.transform(${context});\nif (! ${UTIL}.noChangeMarker(${CHANGE_LOCAL})) {\n  ${value} = ${CHANGE_LOCAL};\n  ${change} = true;\n  ${addRecord}\n}\n${notify}\n`), assert.type.string);\n}\nObject.defineProperty(pipeCheckTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {\n  return `\n${assignment}\nif (${newValue} !== ${oldValue} || (${newValue} !== ${newValue}) && (${oldValue} !== ${oldValue})) {\n  ${change} = true;\n  ${addRecord}\n  ${oldValue} = ${newValue};\n}\n${notify}\n`;\n}\nfunction assignmentTemplate(field, value) {\n  assert.argumentTypes(field, assert.type.string, value, assert.type.string);\n  return `${field} = ${value};`;\n}\nObject.defineProperty(assignmentTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction localDefinitionsTemplate(names) {\n  return assert.returnType((names.map((n) => `var ${n};`).join(\"\\n\")), assert.type.string);\n}\nObject.defineProperty(localDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction changeDefinitionsTemplate(names) {\n  return assert.returnType((names.map((n) => `var ${n} = false;`).join(\"\\n\")), assert.type.string);\n}\nObject.defineProperty(changeDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction fieldDefinitionsTemplate(names) {\n  return assert.returnType((names.map((n) => `${n} = ${UTIL}.unitialized();`).join(\"\\n\")), assert.type.string);\n}\nObject.defineProperty(fieldDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction ifChangedGuardTemplate(changeNames, body) {\n  assert.argumentTypes(changeNames, List, body, assert.type.string);\n  var cond = changeNames.join(\" || \");\n  return assert.returnType((`\nif (${cond}) {\n  ${body}\n}\n`), assert.type.string);\n}\nObject.defineProperty(ifChangedGuardTemplate, \"parameters\", {get: function() {\n    return [[List], [assert.type.string]];\n  }});\nfunction addSimpleChangeRecordTemplate(protoIndex, oldValue, newValue) {\n  assert.argumentTypes(protoIndex, assert.type.number, oldValue, assert.type.string, newValue, assert.type.string);\n  return `${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.simpleChangeRecord(${PROTOS_ACCESSOR}[${protoIndex}].bindingMemento, ${oldValue}, ${newValue}));`;\n}\nObject.defineProperty(addSimpleChangeRecordTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number], [assert.type.string], [assert.type.string]];\n  }});\nexport class ChangeDetectorJITGenerator {\n  constructor(typeName, records) {\n    assert.argumentTypes(typeName, assert.type.string, records, assert.genericType(List, ProtoRecord));\n    this.typeName = typeName;\n    this.records = records;\n    this.localNames = this.getLocalNames(records);\n    this.changeNames = this.getChangeNames(this.localNames);\n    this.fieldNames = this.getFieldNames(this.localNames);\n    this.pipeNames = this.getPipeNames(this.localNames);\n  }\n  getLocalNames(records) {\n    assert.argumentTypes(records, assert.genericType(List, ProtoRecord));\n    var index = 0;\n    var names = records.map((r) => {\n      var sanitizedName = r.name.replace(new RegExp(\"\\\\W\", \"g\"), '');\n      return `${sanitizedName}${index++}`;\n    });\n    return assert.returnType(([\"context\"].concat(names)), assert.genericType(List, String));\n  }\n  getChangeNames(localNames) {\n    return assert.returnType((localNames.map((n) => `change_${n}`)), assert.genericType(List, String));\n  }\n  getFieldNames(localNames) {\n    return assert.returnType((localNames.map((n) => `this.${n}`)), assert.genericType(List, String));\n  }\n  getPipeNames(localNames) {\n    return assert.returnType((localNames.map((n) => `this.${n}_pipe`)), assert.genericType(List, String));\n  }\n  generate() {\n    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genHydrate());\n    return assert.returnType((new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', text)(AbstractChangeDetector, ChangeDetectionUtil, this.records)), Function);\n  }\n  genConstructor() {\n    return assert.returnType((constructorTemplate(this.typeName, this.genFieldDefinitions())), assert.type.string);\n  }\n  genHydrate() {\n    return assert.returnType((hydrateTemplate(this.typeName, this.genFieldDefinitions(), pipeOnDestroyTemplate(this.getnonNullPipeNames()))), assert.type.string);\n  }\n  genFieldDefinitions() {\n    var fields = [];\n    fields = fields.concat(this.fieldNames);\n    fields = fields.concat(this.getnonNullPipeNames());\n    return fieldDefinitionsTemplate(fields);\n  }\n  getnonNullPipeNames() {\n    var pipes = [];\n    this.records.forEach((r) => {\n      if (r.mode === RECORD_TYPE_PIPE) {\n        pipes.push(this.pipeNames[r.selfIndex]);\n      }\n    });\n    return assert.returnType((pipes), assert.genericType(List, String));\n  }\n  genDetectChanges() {\n    var body = this.genBody();\n    return assert.returnType((detectChangesTemplate(this.typeName, body)), assert.type.string);\n  }\n  genBody() {\n    var rec = this.records.map((r) => this.genRecord(r)).join(\"\\n\");\n    return assert.returnType((bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec)), assert.type.string);\n  }\n  genLocalDefinitions() {\n    return assert.returnType((localDefinitionsTemplate(this.localNames)), assert.type.string);\n  }\n  genChangeDefinitions() {\n    return assert.returnType((changeDefinitionsTemplate(this.changeNames)), assert.type.string);\n  }\n  genRecord(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    if (r.mode === RECORD_TYPE_PIPE) {\n      return assert.returnType((this.genPipeCheck(r)), assert.type.string);\n    } else {\n      return assert.returnType((this.genReferenceCheck(r)), assert.type.string);\n    }\n  }\n  genPipeCheck(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var context = this.localNames[r.contextIndex];\n    var pipe = this.pipeNames[r.selfIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n    return assert.returnType((pipeCheckTemplate(context, pipe, r.name, newValue, change, addRecord, notify)), assert.type.string);\n  }\n  genReferenceCheck(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var assignment = this.genUpdateCurrentValue(r);\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);\n    ;\n    if (r.isPureFunction()) {\n      return assert.returnType((this.ifChangedGuard(r, check)), assert.type.string);\n    } else {\n      return assert.returnType((check), assert.type.string);\n    }\n  }\n  genUpdateCurrentValue(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var context = this.localNames[r.contextIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var args = this.genArgs(r);\n    switch (r.mode) {\n      case RECORD_TYPE_SELF:\n        return assert.returnType((assignmentTemplate(newValue, context)), assert.type.string);\n      case RECORD_TYPE_CONST:\n        return assert.returnType((`${newValue} = ${this.genLiteral(r.funcOrValue)}`), assert.type.string);\n      case RECORD_TYPE_PROPERTY:\n        return assert.returnType((assignmentTemplate(newValue, `${context}.${r.name}`)), assert.type.string);\n      case RECORD_TYPE_LOCAL:\n        return assert.returnType((assignmentTemplate(newValue, `${LOCALS_ACCESSOR}.get('${r.name}')`)), assert.type.string);\n      case RECORD_TYPE_INVOKE_METHOD:\n        return assert.returnType((assignmentTemplate(newValue, `${context}.${r.name}(${args})`)), assert.type.string);\n      case RECORD_TYPE_INVOKE_CLOSURE:\n        return assert.returnType((assignmentTemplate(newValue, `${context}(${args})`)), assert.type.string);\n      case RECORD_TYPE_PRIMITIVE_OP:\n        return assert.returnType((assignmentTemplate(newValue, `${UTIL}.${r.name}(${args})`)), assert.type.string);\n      case RECORD_TYPE_INTERPOLATE:\n        return assert.returnType((assignmentTemplate(newValue, this.genInterpolation(r))), assert.type.string);\n      case RECORD_TYPE_KEYED_ACCESS:\n        var key = this.localNames[r.args[0]];\n        return assert.returnType((assignmentTemplate(newValue, `${context}[${key}]`)), assert.type.string);\n      default:\n        throw new BaseException(`Unknown operation ${r.mode}`);\n    }\n  }\n  ifChangedGuard(r, body) {\n    return assert.returnType((ifChangedGuardTemplate(r.args.map((a) => this.changeNames[a]), body)), assert.type.string);\n  }\n  genInterpolation(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var res = \"\";\n    for (var i = 0; i < r.args.length; ++i) {\n      res += this.genLiteral(r.fixedArgs[i]);\n      res += \" + \";\n      res += this.localNames[r.args[i]];\n      res += \" + \";\n    }\n    res += this.genLiteral(r.fixedArgs[r.args.length]);\n    return assert.returnType((res), assert.type.string);\n  }\n  genLiteral(value) {\n    return assert.returnType((JSON.stringify(value)), assert.type.string);\n  }\n  genNotify(r) {\n    return assert.returnType((r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : ''), assert.type.string);\n  }\n  genArgs(r) {\n    return assert.returnType((r.args.map((arg) => this.localNames[arg]).join(\", \")), assert.type.string);\n  }\n}\nObject.defineProperty(ChangeDetectorJITGenerator, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.genericType(List, ProtoRecord)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getLocalNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, ProtoRecord)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getChangeNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getFieldNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getPipeNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genRecord, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genPipeCheck, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genReferenceCheck, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genUpdateCurrentValue, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.ifChangedGuard, \"parameters\", {get: function() {\n    return [[ProtoRecord], [assert.type.string]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genInterpolation, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genArgs, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\n\n//# sourceMappingURL=/Users/jbisa/ksi/devel/angular2/modules/angular2/src/change_detection/change_detection_jit_generator.map\n\n//# sourceMappingURL=./change_detection_jit_generator.map","assert.genericType($__placeholder__0)","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()"]}