{"version":3,"sources":["@traceur/generated/TemplateParser/5368","angular2/src/facade/lang.es6","angular2/src/facade/@traceur/generated/TemplateParser/25","angular2/src/facade/@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/5376","@traceur/generated/TemplateParser/5367","@traceur/generated/TemplateParser/5366","@traceur/generated/TemplateParser/5371","@traceur/generated/TemplateParser/5377","@traceur/generated/TemplateParser/5370","@traceur/generated/TemplateParser/5379","@traceur/generated/TemplateParser/5369","@traceur/generated/TemplateParser/5373","angular2/src/facade/@traceur/generated/TemplateParser/24","angular2/src/facade/@traceur/generated/TemplateParser/4727","@traceur/generated/TemplateParser/4536","angular2/src/facade/@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/5374","@traceur/generated/TemplateParser/13","angular2/src/facade/@traceur/generated/TemplateParser/592","@traceur/generated/TemplateParser/5378","angular2/src/facade/@traceur/generated/TemplateParser/4734","angular2/src/facade/@traceur/generated/TemplateParser/4740","angular2/src/facade/lang.js"],"names":[],"mappings":"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","file":"angular2/src/facade/lang.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","var _global = typeof window === 'undefined' ? global : window;\nexport {_global as global};\n\nexport var Type = Function;\nexport var Math = _global.Math;\nexport var Date = _global.Date;\n\nvar assertionsEnabled_ = typeof assert !== 'undefined';\n\nvar int;\n// global assert support, as Dart has it...\n// TODO: `assert` calls need to be removed in production code!\nif (assertionsEnabled_) {\n  _global.assert = assert;\n  // `int` is not a valid JS type\n  int = assert.define('int', function(value) {\n    return typeof value === 'number' && value%1 === 0;\n  });\n} else {\n  int = {};\n  _global.assert = function() {};\n}\nexport {int};\n\nexport class CONST {}\nexport class ABSTRACT {}\nexport class IMPLEMENTS {}\n\nexport function isPresent(obj):boolean {\n  return obj !== undefined && obj !== null;\n}\n\nexport function isBlank(obj):boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isString(obj):boolean {\n  return typeof obj === \"string\";\n}\n\nexport function isFunction(obj):boolean {\n  return typeof obj === \"function\";\n}\n\nexport function stringify(token):string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (token === undefined || token === null) {\n    return '' + token;\n  }\n\n  if (token.name) {\n    return token.name;\n  }\n\n  return token.toString();\n}\n\nexport class StringWrapper {\n  static fromCharCode(code:int):string {\n    return String.fromCharCode(code);\n  }\n\n  static charCodeAt(s:string, index:int) {\n    return s.charCodeAt(index);\n  }\n\n  static split(s:string, regExp:RegExp) {\n    return s.split(regExp.multiple);\n  }\n\n  static equals(s:string, s2:string):boolean {\n    return s === s2;\n  }\n\n  static replace(s:string, from , replace:string): string {\n    if (typeof(from) === \"string\") {\n      return s.replace(from, replace);\n    } else {\n      return s.replace(from.single, replace);\n    }\n  }\n\n  static replaceAll(s:string, from:RegExp, replace:string):string {\n    return s.replace(from.multiple, replace);\n  }\n\n  static startsWith(s:string, start:string) {\n    return s.startsWith(start);\n  }\n\n  static substring(s:string, start:int, end:int = null) {\n    return s.substring(start, end === null ? undefined: end);\n  }\n\n  static replaceAllMapped(s:string, from:RegExp, cb:Function): string {\n    return s.replace(from.multiple, function(...matches) {\n      // Remove offset & string from the result array\n      matches.splice(-2, 2);\n      // The callback receives match, p1, ..., pn\n      return cb(matches);\n    });\n  }\n\n  static contains(s:string, substr:string): boolean {\n    return s.indexOf(substr) != -1;\n  }\n}\n\nexport class StringJoiner {\n  constructor() {\n    this.parts = [];\n  }\n\n  add(part:string) {\n    this.parts.push(part);\n  }\n\n  toString():string {\n    return this.parts.join(\"\");\n  }\n}\n\nexport class NumberParseError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n\n\nexport class NumberWrapper {\n  static toFixed(n:number, fractionDigits:int):string {\n    return n.toFixed(fractionDigits);\n  }\n\n  static equal(a, b):boolean {\n    return a === b;\n  }\n\n  static parseIntAutoRadix(text:string):int {\n    var result:int = parseInt(text);\n    if (isNaN(result)) {\n      throw new NumberParseError(\"Invalid integer literal when parsing \" + text);\n    }\n    return result;\n  }\n\n  static parseInt(text:string, radix:int):int {\n    if (radix == 10) {\n      if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n        return parseInt(text, radix);\n      }\n    } else if (radix == 16) {\n      if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n        return parseInt(text, radix);\n      }\n    } else {\n      var result:int = parseInt(text, radix);\n      if (!isNaN(result)) {\n        return result;\n      }\n    }\n    throw new NumberParseError(\"Invalid integer literal when parsing \" + text + \" in base \" + radix);\n  }\n\n  // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n  static parseFloat(text:string):number {\n    return parseFloat(text);\n  }\n\n  static get NaN():number {\n    return NaN;\n  }\n\n  static isNaN(value):boolean {\n    return isNaN(value);\n  }\n\n  static isInteger(value):boolean {\n    return Number.isInteger(value);\n  }\n}\n\nexport var RegExp;\nif (assertionsEnabled_) {\n  RegExp = assert.define('RegExp', function(obj) {\n    assert(obj).is(assert.structure({\n      single: _global.RegExp,\n      multiple: _global.RegExp\n    }));\n  });\n} else {\n  RegExp = {};\n}\n\nexport class RegExpWrapper {\n  static create(regExpStr, flags:string = ''):RegExp {\n    flags = flags.replace(/g/g, '');\n    return {\n      multiple: new _global.RegExp(regExpStr, flags + 'g'),\n      single: new _global.RegExp(regExpStr, flags)\n    };\n  }\n  static firstMatch(regExp, input) {\n    return input.match(regExp.single);\n  }\n  static matcher(regExp, input) {\n    // Reset regex state for the case\n    // someone did not loop over all matches\n    // last time.\n    regExp.multiple.lastIndex = 0;\n    return {\n      re: regExp.multiple,\n      input: input\n    };\n  }\n}\n\nexport class RegExpMatcherWrapper {\n  static next(matcher) {\n    return matcher.re.exec(matcher.input);\n  }\n}\n\nexport class FunctionWrapper {\n  static apply(fn:Function, posArgs) {\n    return fn.apply(null, posArgs);\n  }\n}\n\n// No subclass so that we preserve error stack.\nexport var BaseException = Error;\n\n// JS has NaN !== NaN\nexport function looseIdentical(a, b):boolean {\n  return a === b ||\n         typeof a === \"number\" && typeof b === \"number\" && isNaN(a) && isNaN(b);\n}\n\n// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)\n// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\nexport function getMapKey(value) {\n  return value;\n}\n\nexport function normalizeBlank(obj) {\n  return isBlank(obj) ? null : obj;\n}\n\nexport function isJsObject(o):boolean {\n  return o !== null && (typeof o === \"function\" || typeof o === \"object\");\n}\n\nexport function assertionsEnabled():boolean {\n  return assertionsEnabled_;\n}\n\nexport function print(obj) {\n  if (obj instanceof Error) {\n    console.log(obj.stack);\n  } else {\n    console.log(obj);\n  }\n}\n\n// Can't be all uppercase as our transpiler would think it is a special directive...\nexport var Json = _global.JSON;\n\nexport class DateWrapper {\n  static fromMillis(ms) {\n    return new Date(ms);\n  }\n  static toMillis(date:Date) {\n    return date.getTime();\n  }\n  static now() {\n    return new Date();\n  }\n  static toJson(date) {\n    return date.toJSON();\n  }\n}\n","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.type.$__placeholder__0)","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__export($__placeholder__0, $__placeholder__1);","$__export($__placeholder__0, $__placeholder__1)","$__export($__placeholder__0, $__placeholder__1)}","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","assert.argumentTypes($__placeholder__0)","assert.type.any","\n            for (var $__placeholder__0 = [], $__placeholder__1 = 0;\n                 $__placeholder__2 < arguments.length; $__placeholder__3++)\n              $__placeholder__4[$__placeholder__5] = arguments[$__placeholder__6];","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","assert.type($__placeholder__0, $__placeholder__1)","$__export($__placeholder__0, $__placeholder__1)","assert.type.any","assert.type.any","import {assert} from \"rtts_assert/rtts_assert\";\nvar _global = typeof window === 'undefined' ? global : window;\nexport {_global as global};\nexport var Type = Function;\nexport var Math = _global.Math;\nexport var Date = _global.Date;\nvar assertionsEnabled_ = typeof assert !== 'undefined';\nvar int;\nif (assertionsEnabled_) {\n  _global.assert = assert;\n  int = assert.define('int', function(value) {\n    return typeof value === 'number' && value % 1 === 0;\n  });\n} else {\n  int = {};\n  _global.assert = function() {};\n}\nexport {int};\nexport class CONST {}\nexport class ABSTRACT {}\nexport class IMPLEMENTS {}\nexport function isPresent(obj) {\n  return assert.returnType((obj !== undefined && obj !== null), assert.type.boolean);\n}\nexport function isBlank(obj) {\n  return assert.returnType((obj === undefined || obj === null), assert.type.boolean);\n}\nexport function isString(obj) {\n  return assert.returnType((typeof obj === \"string\"), assert.type.boolean);\n}\nexport function isFunction(obj) {\n  return assert.returnType((typeof obj === \"function\"), assert.type.boolean);\n}\nexport function stringify(token) {\n  if (typeof token === 'string') {\n    return assert.returnType((token), assert.type.string);\n  }\n  if (token === undefined || token === null) {\n    return assert.returnType(('' + token), assert.type.string);\n  }\n  if (token.name) {\n    return assert.returnType((token.name), assert.type.string);\n  }\n  return assert.returnType((token.toString()), assert.type.string);\n}\nexport class StringWrapper {\n  static fromCharCode(code) {\n    assert.argumentTypes(code, int);\n    return assert.returnType((String.fromCharCode(code)), assert.type.string);\n  }\n  static charCodeAt(s, index) {\n    assert.argumentTypes(s, assert.type.string, index, int);\n    return s.charCodeAt(index);\n  }\n  static split(s, regExp) {\n    assert.argumentTypes(s, assert.type.string, regExp, RegExp);\n    return s.split(regExp.multiple);\n  }\n  static equals(s, s2) {\n    assert.argumentTypes(s, assert.type.string, s2, assert.type.string);\n    return assert.returnType((s === s2), assert.type.boolean);\n  }\n  static replace(s, from, replace) {\n    assert.argumentTypes(s, assert.type.string, from, assert.type.any, replace, assert.type.string);\n    if (typeof(from) === \"string\") {\n      return assert.returnType((s.replace(from, replace)), assert.type.string);\n    } else {\n      return assert.returnType((s.replace(from.single, replace)), assert.type.string);\n    }\n  }\n  static replaceAll(s, from, replace) {\n    assert.argumentTypes(s, assert.type.string, from, RegExp, replace, assert.type.string);\n    return assert.returnType((s.replace(from.multiple, replace)), assert.type.string);\n  }\n  static startsWith(s, start) {\n    assert.argumentTypes(s, assert.type.string, start, assert.type.string);\n    return s.startsWith(start);\n  }\n  static substring(s, start, end = null) {\n    assert.argumentTypes(s, assert.type.string, start, int, end, int);\n    return s.substring(start, end === null ? undefined : end);\n  }\n  static replaceAllMapped(s, from, cb) {\n    assert.argumentTypes(s, assert.type.string, from, RegExp, cb, Function);\n    return assert.returnType((s.replace(from.multiple, function(...matches) {\n      matches.splice(-2, 2);\n      return cb(matches);\n    })), assert.type.string);\n  }\n  static contains(s, substr) {\n    assert.argumentTypes(s, assert.type.string, substr, assert.type.string);\n    return assert.returnType((s.indexOf(substr) != -1), assert.type.boolean);\n  }\n}\nObject.defineProperty(StringWrapper.fromCharCode, \"parameters\", {get: function() {\n    return [[int]];\n  }});\nObject.defineProperty(StringWrapper.charCodeAt, \"parameters\", {get: function() {\n    return [[assert.type.string], [int]];\n  }});\nObject.defineProperty(StringWrapper.split, \"parameters\", {get: function() {\n    return [[assert.type.string], [RegExp]];\n  }});\nObject.defineProperty(StringWrapper.equals, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.replace, \"parameters\", {get: function() {\n    return [[assert.type.string], [], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.replaceAll, \"parameters\", {get: function() {\n    return [[assert.type.string], [RegExp], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.startsWith, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nObject.defineProperty(StringWrapper.substring, \"parameters\", {get: function() {\n    return [[assert.type.string], [int], [int]];\n  }});\nObject.defineProperty(StringWrapper.replaceAllMapped, \"parameters\", {get: function() {\n    return [[assert.type.string], [RegExp], [Function]];\n  }});\nObject.defineProperty(StringWrapper.contains, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nexport class StringJoiner {\n  constructor() {\n    this.parts = [];\n  }\n  add(part) {\n    assert.argumentTypes(part, assert.type.string);\n    this.parts.push(part);\n  }\n  toString() {\n    return assert.returnType((this.parts.join(\"\")), assert.type.string);\n  }\n}\nObject.defineProperty(StringJoiner.prototype.add, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nexport class NumberParseError extends Error {\n  constructor(message) {\n    super();\n    this.message = message;\n  }\n  toString() {\n    return this.message;\n  }\n}\nexport class NumberWrapper {\n  static toFixed(n, fractionDigits) {\n    assert.argumentTypes(n, assert.type.number, fractionDigits, int);\n    return assert.returnType((n.toFixed(fractionDigits)), assert.type.string);\n  }\n  static equal(a, b) {\n    return assert.returnType((a === b), assert.type.boolean);\n  }\n  static parseIntAutoRadix(text) {\n    assert.argumentTypes(text, assert.type.string);\n    var result = assert.type(parseInt(text), int);\n    if (isNaN(result)) {\n      throw new NumberParseError(\"Invalid integer literal when parsing \" + text);\n    }\n    return assert.returnType((result), int);\n  }\n  static parseInt(text, radix) {\n    assert.argumentTypes(text, assert.type.string, radix, int);\n    if (radix == 10) {\n      if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n        return assert.returnType((parseInt(text, radix)), int);\n      }\n    } else if (radix == 16) {\n      if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n        return assert.returnType((parseInt(text, radix)), int);\n      }\n    } else {\n      var result = assert.type(parseInt(text, radix), int);\n      if (!isNaN(result)) {\n        return assert.returnType((result), int);\n      }\n    }\n    throw new NumberParseError(\"Invalid integer literal when parsing \" + text + \" in base \" + radix);\n  }\n  static parseFloat(text) {\n    assert.argumentTypes(text, assert.type.string);\n    return assert.returnType((parseFloat(text)), assert.type.number);\n  }\n  static get NaN() {\n    return assert.returnType((NaN), assert.type.number);\n  }\n  static isNaN(value) {\n    return assert.returnType((isNaN(value)), assert.type.boolean);\n  }\n  static isInteger(value) {\n    return assert.returnType((Number.isInteger(value)), assert.type.boolean);\n  }\n}\nObject.defineProperty(NumberWrapper.toFixed, \"parameters\", {get: function() {\n    return [[assert.type.number], [int]];\n  }});\nObject.defineProperty(NumberWrapper.parseIntAutoRadix, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(NumberWrapper.parseInt, \"parameters\", {get: function() {\n    return [[assert.type.string], [int]];\n  }});\nObject.defineProperty(NumberWrapper.parseFloat, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nexport var RegExp;\nif (assertionsEnabled_) {\n  RegExp = assert.define('RegExp', function(obj) {\n    assert(obj).is(assert.structure({\n      single: _global.RegExp,\n      multiple: _global.RegExp\n    }));\n  });\n} else {\n  RegExp = {};\n}\nexport class RegExpWrapper {\n  static create(regExpStr, flags = '') {\n    assert.argumentTypes(regExpStr, assert.type.any, flags, assert.type.string);\n    flags = flags.replace(/g/g, '');\n    return assert.returnType(({\n      multiple: new _global.RegExp(regExpStr, flags + 'g'),\n      single: new _global.RegExp(regExpStr, flags)\n    }), RegExp);\n  }\n  static firstMatch(regExp, input) {\n    return input.match(regExp.single);\n  }\n  static matcher(regExp, input) {\n    regExp.multiple.lastIndex = 0;\n    return {\n      re: regExp.multiple,\n      input: input\n    };\n  }\n}\nObject.defineProperty(RegExpWrapper.create, \"parameters\", {get: function() {\n    return [[], [assert.type.string]];\n  }});\nexport class RegExpMatcherWrapper {\n  static next(matcher) {\n    return matcher.re.exec(matcher.input);\n  }\n}\nexport class FunctionWrapper {\n  static apply(fn, posArgs) {\n    assert.argumentTypes(fn, Function, posArgs, assert.type.any);\n    return fn.apply(null, posArgs);\n  }\n}\nObject.defineProperty(FunctionWrapper.apply, \"parameters\", {get: function() {\n    return [[Function], []];\n  }});\nexport var BaseException = Error;\nexport function looseIdentical(a, b) {\n  return assert.returnType((a === b || typeof a === \"number\" && typeof b === \"number\" && isNaN(a) && isNaN(b)), assert.type.boolean);\n}\nexport function getMapKey(value) {\n  return value;\n}\nexport function normalizeBlank(obj) {\n  return isBlank(obj) ? null : obj;\n}\nexport function isJsObject(o) {\n  return assert.returnType((o !== null && (typeof o === \"function\" || typeof o === \"object\")), assert.type.boolean);\n}\nexport function assertionsEnabled() {\n  return assert.returnType((assertionsEnabled_), assert.type.boolean);\n}\nexport function print(obj) {\n  if (obj instanceof Error) {\n    console.log(obj.stack);\n  } else {\n    console.log(obj);\n  }\n}\nexport var Json = _global.JSON;\nexport class DateWrapper {\n  static fromMillis(ms) {\n    return new Date(ms);\n  }\n  static toMillis(date) {\n    assert.argumentTypes(date, Date);\n    return date.getTime();\n  }\n  static now() {\n    return new Date();\n  }\n  static toJson(date) {\n    return date.toJSON();\n  }\n}\nObject.defineProperty(DateWrapper.toMillis, \"parameters\", {get: function() {\n    return [[Date]];\n  }});\n\n//# sourceMappingURL=/Users/jbisa/ksi/devel/angular2/modules/angular2/src/facade/lang.map\n\n//# sourceMappingURL=./lang.map"]}