{"version":3,"sources":["@traceur/generated/TemplateParser/5368","angular2/test/change_detection/change_detection_spec.js","angular2/test/change_detection/@traceur/generated/TemplateParser/24","angular2/test/change_detection/@traceur/generated/TemplateParser/23","angular2/test/change_detection/@traceur/generated/TemplateParser/26","angular2/test/change_detection/@traceur/generated/TemplateParser/1237","angular2/test/change_detection/@traceur/generated/TemplateParser/1238","angular2/test/change_detection/@traceur/generated/TemplateParser/1239","angular2/test/change_detection/@traceur/generated/TemplateParser/1240","angular2/test/change_detection/@traceur/generated/TemplateParser/1241","@traceur/generated/TemplateParser/5376","@traceur/generated/TemplateParser/5367","@traceur/generated/TemplateParser/5366","@traceur/generated/TemplateParser/5371","@traceur/generated/TemplateParser/5375","@traceur/generated/TemplateParser/5374","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/7","angular2/test/change_detection/@traceur/generated/TemplateParser/1253","@traceur/generated/TemplateParser/5373","angular2/test/change_detection/@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"angular2/test/change_detection/change_detection_spec.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, IS_DARTIUM} from 'angular2/test_lib';\n\nimport {isPresent, isBlank, isJsObject, BaseException, FunctionWrapper} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {Parser} from 'angular2/src/change_detection/parser/parser';\nimport {Lexer} from 'angular2/src/change_detection/parser/lexer';\nimport {Locals} from 'angular2/src/change_detection/parser/locals';\n\nimport {ChangeDispatcher, DynamicChangeDetector, ChangeDetectionError, BindingRecord,\n  PipeRegistry, Pipe, NO_CHANGE, CHECK_ALWAYS, CHECK_ONCE, CHECKED, DETACHED} from 'angular2/change_detection';\n\nimport {ChangeDetectionUtil} from 'angular2/src/change_detection/change_detection_util';\n\nimport {JitProtoChangeDetector, DynamicProtoChangeDetector} from 'angular2/src/change_detection/proto_change_detector';\n\n\nexport function main() {\n  describe(\"change detection\", () => {\n    StringMapWrapper.forEach(\n      { \"dynamic\": (registry = null) => new DynamicProtoChangeDetector(registry),\n        \"JIT\": (registry = null) => new JitProtoChangeDetector(registry)\n      }, (createProtoChangeDetector, name) => {\n\n        if (name == \"JIT\" && IS_DARTIUM) return;\n\n        function ast(exp:string, location:string = 'location') {\n          var parser = new Parser(new Lexer());\n          return parser.parseBinding(exp, location);\n        }\n\n        function convertLocalsToVariableBindings(locals) {\n          var variableBindings = [];\n          var loc = locals;\n          while(isPresent(loc)) {\n            MapWrapper.forEach(loc.current, (v, k) => ListWrapper.push(variableBindings, k));\n            loc = loc.parent;\n          }\n          return variableBindings;\n        }\n\n        function createChangeDetector(memo:string, exp:string, context = null, locals = null, registry = null) {\n          var pcd = createProtoChangeDetector(registry);\n          var dispatcher = new TestDispatcher();\n\n          var variableBindings = convertLocalsToVariableBindings(locals);\n          var cd = pcd.instantiate(dispatcher, [new BindingRecord(ast(exp), memo, memo)], variableBindings);\n          cd.hydrate(context, locals);\n\n          return {\"changeDetector\" : cd, \"dispatcher\" : dispatcher};\n        }\n\n        function executeWatch(memo:string, exp:string, context = null, locals = null) {\n          var res = createChangeDetector(memo, exp, context, locals);\n          res[\"changeDetector\"].detectChanges();\n          return res[\"dispatcher\"].log;\n        }\n\n        describe(`${name} change detection`, () => {\n          it('should do simple watching', () => {\n            var person = new Person(\"misko\");\n            var c = createChangeDetector('name', 'name', person);\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual(['name=misko']);\n            dispatcher.clear();\n\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual([]);\n            dispatcher.clear();\n\n            person.name = \"Misko\";\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual(['name=Misko']);\n          });\n\n          it('should report all changes on the first run including uninitialized values', () => {\n            expect(executeWatch('value', 'value', new Uninitialized())).toEqual(['value=null']);\n          });\n\n          it('should report all changes on the first run including null values', () => {\n            var td = new TestData(null);\n            expect(executeWatch('a', 'a', td)).toEqual(['a=null']);\n          });\n\n          it(\"should support literals\", () => {\n            expect(executeWatch('const', '10')).toEqual(['const=10']);\n            expect(executeWatch('const', '\"str\"')).toEqual(['const=str']);\n            expect(executeWatch('const', '\"a\\n\\nb\"')).toEqual(['const=a\\n\\nb']);\n          });\n\n          it('simple chained property access', () => {\n            var address = new Address('Grenoble');\n            var person = new Person('Victor', address);\n\n            expect(executeWatch('address.city', 'address.city', person))\n              .toEqual(['address.city=Grenoble']);\n          });\n\n          it(\"should support method calls\", () => {\n            var person = new Person('Victor');\n            expect(executeWatch('m', 'sayHi(\"Jim\")', person)).toEqual(['m=Hi, Jim']);\n          });\n\n          it(\"should support function calls\", () => {\n            var td = new TestData(() => (a) => a);\n            expect(executeWatch('value', 'a()(99)', td)).toEqual(['value=99']);\n          });\n\n          it(\"should support chained method calls\", () => {\n            var person = new Person('Victor');\n            var td = new TestData(person);\n            expect(executeWatch('m', 'a.sayHi(\"Jim\")', td)).toEqual(['m=Hi, Jim']);\n          });\n\n          it(\"should support literal array\", () => {\n            var c = createChangeDetector('array', '[1,2]');\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues).toEqual([[[1, 2]]]);\n\n            c = createChangeDetector('array', '[1,a]', new TestData(2));\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues).toEqual([[[1, 2]]]);\n          });\n\n          it(\"should support literal maps\", () => {\n            var c = createChangeDetector('map', '{z:1}');\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues[0][0]['z']).toEqual(1);\n\n            c = createChangeDetector('map', '{z:a}', new TestData(1));\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues[0][0]['z']).toEqual(1);\n          });\n\n          it(\"should support binary operations\", () => {\n            expect(executeWatch('exp', '10 + 2')).toEqual(['exp=12']);\n            expect(executeWatch('exp', '10 - 2')).toEqual(['exp=8']);\n\n            expect(executeWatch('exp', '10 * 2')).toEqual(['exp=20']);\n            expect(executeWatch('exp', '10 / 2')).toEqual([`exp=${5.0}`]); //dart exp=5.0, js exp=5\n            expect(executeWatch('exp', '11 % 2')).toEqual(['exp=1']);\n\n            expect(executeWatch('exp', '1 == 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '1 != 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '1 < 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 < 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '2 > 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 < 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '1 <= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 <= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 <= 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '2 >= 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 >= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '1 >= 2')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', 'true && true')).toEqual(['exp=true']);\n            expect(executeWatch('exp', 'true && false')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', 'true || false')).toEqual(['exp=true']);\n            expect(executeWatch('exp', 'false || false')).toEqual(['exp=false']);\n          });\n\n          it(\"should support negate\", () => {\n            expect(executeWatch('exp', '!true')).toEqual(['exp=false']);\n            expect(executeWatch('exp', '!!true')).toEqual(['exp=true']);\n          });\n\n          it(\"should support conditionals\", () => {\n            expect(executeWatch('m', '1 < 2 ? 1 : 2')).toEqual(['m=1']);\n            expect(executeWatch('m', '1 > 2 ? 1 : 2')).toEqual(['m=2']);\n          });\n\n          describe(\"keyed access\", () => {\n            it(\"should support accessing a list item\", () => {\n              expect(executeWatch('array[0]', '[\"foo\", \"bar\"][0]')).toEqual(['array[0]=foo']);\n            });\n\n            it(\"should support accessing a map item\", () => {\n              expect(executeWatch('map[foo]', '{\"foo\": \"bar\"}[\"foo\"]')).toEqual(['map[foo]=bar']);\n            });\n          });\n\n          it(\"should support interpolation\", () => {\n            var parser = new Parser(new Lexer());\n            var pcd = createProtoChangeDetector();\n            var ast = parser.parseInterpolation(\"B{{a}}A\", \"location\");\n\n            var dispatcher = new TestDispatcher();\n            var cd = pcd.instantiate(dispatcher, [new BindingRecord(ast, \"memo\", \"memo\")], null);\n            cd.hydrate(new TestData(\"value\"), null);\n\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([\"memo=BvalueA\"]);\n          });\n \n          describe(\"change notification\", () => {\n            describe(\"simple checks\", () => {\n              it(\"should pass a change record to the dispatcher\", () => {\n                var person = new Person('bob');\n                var c = createChangeDetector('name', 'name', person);\n                var cd = c[\"changeDetector\"];\n                var dispatcher = c[\"dispatcher\"];\n\n                cd.detectChanges();\n\n                var changeRecord = dispatcher.changeRecords[0][0];\n\n                expect(changeRecord.bindingMemento).toEqual('name');\n                expect(changeRecord.change.currentValue).toEqual('bob');\n                expect(changeRecord.change.previousValue).toEqual(ChangeDetectionUtil.unitialized());\n              });\n            });\n\n            describe(\"pipes\", () => {\n              it(\"should pass a change record to the dispatcher\", () => {\n                var registry = new FakePipeRegistry('pipe', () => new CountingPipe());\n\n                var person = new Person('bob');\n                var c = createChangeDetector('name', 'name | pipe', person, null, registry);\n                var cd = c[\"changeDetector\"];\n                var dispatcher = c[\"dispatcher\"];\n\n                cd.detectChanges();\n\n                var changeRecord = dispatcher.changeRecords[0][0];\n\n                expect(changeRecord.bindingMemento).toEqual('name');\n                expect(changeRecord.change.currentValue).toEqual('bob state:0');\n                expect(changeRecord.change.previousValue).toEqual(ChangeDetectionUtil.unitialized());\n              });\n            });\n\n            describe(\"group changes\", () => {\n              it(\"should notify the dispatcher when a group of records changes\", () => {\n                var pcd = createProtoChangeDetector();\n\n                var dispatcher = new TestDispatcher();\n                var cd = pcd.instantiate(dispatcher, [\n                  new BindingRecord(ast(\"1 + 2\"), \"memo\", \"1\"),\n                  new BindingRecord(ast(\"10 + 20\"), \"memo\", \"1\"),\n                  new BindingRecord(ast(\"100 + 200\"), \"memo\", \"2\")\n                ], null);\n\n                cd.detectChanges();\n\n                expect(dispatcher.loggedValues).toEqual([[3, 30], [300]]);\n              });\n\n              it(\"should notify the dispatcher before switching to the next group\", () => {\n                var pcd = createProtoChangeDetector();\n                var dispatcher = new TestDispatcher();\n                var cd = pcd.instantiate(dispatcher, [\n                  new BindingRecord(ast(\"a()\"), \"a\", \"1\"),\n                  new BindingRecord(ast(\"b()\"), \"b\", \"2\"),\n                  new BindingRecord(ast(\"c()\"), \"c\", \"2\")\n                ], null);\n\n                var tr = new TestRecord();\n                tr.a = () => {\n                  dispatcher.logValue('InvokeA');\n                  return 'a'\n                };\n                tr.b = () => {\n                  dispatcher.logValue('InvokeB');\n                  return 'b'\n                };\n                tr.c = () => {\n                  dispatcher.logValue('InvokeC');\n                  return 'c'\n                };\n                cd.hydrate(tr, null);\n\n                cd.detectChanges();\n\n                expect(dispatcher.loggedValues).toEqual(['InvokeA', ['a'], 'InvokeB', 'InvokeC', ['b', 'c']]);\n              });\n            });\n          });\n          \n          describe(\"enforce no new changes\", () => {\n            it(\"should throw when a record gets changed after it has been checked\", () => {\n              var pcd = createProtoChangeDetector();\n              pcd.addAst(ast(\"a\"), \"a\", 1);\n\n              var dispatcher = new TestDispatcher();\n              var cd = pcd.instantiate(dispatcher, [\n                new BindingRecord(ast(\"a\"), \"a\", 1)\n              ], null);\n              cd.hydrate(new TestData('value'), null);\n\n              expect(() => {\n                cd.checkNoChanges();\n              }).toThrowError(new RegExp(\"Expression 'a in location' has changed after it was checked\"));\n            });\n          });\n\n          //TODO vsavkin: implement it\n          describe(\"error handling\", () => {\n            xit(\"should wrap exceptions into ChangeDetectionError\", () => {\n              var pcd = createProtoChangeDetector();\n              var cd = pcd.instantiate(new TestDispatcher(), [\n                new BindingRecord(ast(\"invalidProp\", \"someComponent\"), \"a\", 1)\n              ], null);\n              cd.hydrate(null, null);\n\n              try {\n                cd.detectChanges();\n\n                throw new BaseException(\"fail\");\n              } catch (e) {\n                expect(e).toBeAnInstanceOf(ChangeDetectionError);\n                expect(e.location).toEqual(\"invalidProp in someComponent\");\n              }\n            });\n          });\n\n          describe(\"Locals\", () => {\n            it('should read a value from locals', () => {\n              var locals = new Locals(null,\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n\n              expect(executeWatch('key', 'key', null, locals))\n                .toEqual(['key=value']);\n            });\n\n            it('should invoke a function from local', () => {\n              var locals = new Locals(null,\n                MapWrapper.createFromPairs([[\"key\", () => \"value\"]]));\n\n              expect(executeWatch('key', 'key()', null, locals))\n                .toEqual(['key=value']);\n            });\n\n            it('should handle nested locals', () => {\n              var nested = new Locals(null,\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n              var locals = new Locals(nested, MapWrapper.create());\n\n              expect(executeWatch('key', 'key', null, locals))\n                .toEqual(['key=value']);\n            });\n\n            it(\"should fall back to a regular field read when the locals map\" +\n              \"does not have the requested field\", () => {\n              var locals = new Locals(null,\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n\n              expect(executeWatch('name', 'name', new Person(\"Jim\"), locals))\n                .toEqual(['name=Jim']);\n            });\n          });\n\n          describe(\"handle children\", () => {\n            var parent, child;\n\n            beforeEach(() => {\n              var protoParent = createProtoChangeDetector();\n              parent = protoParent.instantiate(null, [], null);\n\n              var protoChild = createProtoChangeDetector();\n              child = protoChild.instantiate(null, [], null);\n            });\n\n            it(\"should add children\", () => {\n              parent.addChild(child);\n\n              expect(parent.children.length).toEqual(1);\n              expect(parent.children[0]).toBe(child);\n            });\n\n            it(\"should remove children\", () => {\n              parent.addChild(child);\n              parent.removeChild(child);\n\n              expect(parent.children).toEqual([]);\n            });\n          });\n        });\n\n        describe(\"mode\", () => {\n          it(\"should not check a detached change detector\", () => {\n            var c = createChangeDetector('name', 'a', new TestData(\"value\"));\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.mode = DETACHED;\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([]);\n          });\n\n          it(\"should not check a checked change detector\", () => {\n            var c = createChangeDetector('name', 'a', new TestData(\"value\"));\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.mode = CHECKED;\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([]);\n          });\n\n          it(\"should change CHECK_ONCE to CHECKED\", () => {\n            var cd = createProtoChangeDetector().instantiate(null, [], null);\n            cd.mode = CHECK_ONCE;\n\n            cd.detectChanges();\n\n            expect(cd.mode).toEqual(CHECKED);\n          });\n\n          it(\"should not change the CHECK_ALWAYS\", () => {\n            var cd = createProtoChangeDetector().instantiate(null, [], null);\n            cd.mode = CHECK_ALWAYS;\n\n            cd.detectChanges();\n\n            expect(cd.mode).toEqual(CHECK_ALWAYS);\n          });\n        });\n\n        describe(\"markPathToRootAsCheckOnce\", () => {\n          function changeDetector(mode, parent) {\n            var cd = createProtoChangeDetector().instantiate(null, [], null);\n            cd.mode = mode;\n            if (isPresent(parent)) parent.addChild(cd);\n            return cd;\n          }\n\n          it(\"should mark all checked detectors as CHECK_ONCE \" +\n            \"until reaching a detached one\", () => {\n\n            var root = changeDetector(CHECK_ALWAYS, null);\n            var disabled = changeDetector(DETACHED, root);\n            var parent = changeDetector(CHECKED, disabled);\n            var checkAlwaysChild = changeDetector(CHECK_ALWAYS, parent);\n            var checkOnceChild = changeDetector(CHECK_ONCE, checkAlwaysChild);\n            var checkedChild = changeDetector(CHECKED, checkOnceChild);\n\n            checkedChild.markPathToRootAsCheckOnce();\n\n            expect(root.mode).toEqual(CHECK_ALWAYS);\n            expect(disabled.mode).toEqual(DETACHED);\n            expect(parent.mode).toEqual(CHECK_ONCE);\n            expect(checkAlwaysChild.mode).toEqual(CHECK_ALWAYS);\n            expect(checkOnceChild.mode).toEqual(CHECK_ONCE);\n            expect(checkedChild.mode).toEqual(CHECK_ONCE);\n          });\n        });\n\n        describe(\"hydration\", () => {\n          it(\"should be able to rehydrate a change detector\", () => {\n            var c  = createChangeDetector(\"memo\", \"name\");\n            var cd = c[\"changeDetector\"];\n\n            cd.hydrate(\"some context\", null);\n            expect(cd.hydrated()).toBe(true);\n\n            cd.dehydrate();\n            expect(cd.hydrated()).toBe(false);\n\n            cd.hydrate(\"other context\", null);\n            expect(cd.hydrated()).toBe(true);\n          });\n\n          it(\"should destroy all active pipes during dehyration\", () => {\n            var pipe = new OncePipe();\n            var registry = new FakePipeRegistry('pipe', () => pipe);\n            var c  = createChangeDetector(\"memo\", \"name | pipe\", new Person('bob'), null, registry);\n            var cd = c[\"changeDetector\"];\n\n            cd.detectChanges();\n\n            cd.dehydrate();\n\n            expect(pipe.destroyCalled).toBe(true);\n          });\n        });\n\n        describe(\"pipes\", () => {\n          it(\"should support pipes\", () => {\n            var registry = new FakePipeRegistry('pipe', () => new CountingPipe());\n            var ctx = new Person(\"Megatron\");\n\n            var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, null, registry);\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual(['memo=Megatron state:0']);\n\n            dispatcher.clear();\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual(['memo=Megatron state:1']);\n          });\n\n          it(\"should lookup pipes in the registry when the context is not supported\", () => {\n            var registry = new FakePipeRegistry('pipe', () => new OncePipe());\n            var ctx = new Person(\"Megatron\");\n\n            var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, null, registry);\n            var cd = c[\"changeDetector\"];\n\n            cd.detectChanges();\n\n            expect(registry.numberOfLookups).toEqual(1);\n\n            ctx.name = \"Optimus Prime\";\n            cd.detectChanges();\n\n            expect(registry.numberOfLookups).toEqual(2);\n          });\n\n          it(\"should invoke onDestroy on a pipe before switching to another one\", () => {\n            var pipe = new OncePipe();\n            var registry = new FakePipeRegistry('pipe', () => pipe);\n            var ctx = new Person(\"Megatron\");\n\n            var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, null, registry);\n            var cd = c[\"changeDetector\"];\n\n            cd.detectChanges();\n            ctx.name = \"Optimus Prime\";\n            cd.detectChanges();\n\n            expect(pipe.destroyCalled).toEqual(true);\n          });\n        });\n\n        it(\"should do nothing when returns NO_CHANGE\", () => {\n          var registry = new FakePipeRegistry('pipe', () => new IdentityPipe())\n          var ctx = new Person(\"Megatron\");\n\n          var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, null, registry);\n          var cd = c[\"changeDetector\"];\n          var dispatcher = c[\"dispatcher\"];\n\n          cd.detectChanges();\n          cd.detectChanges();\n\n          expect(dispatcher.log).toEqual(['memo=Megatron']);\n\n          ctx.name = \"Optimus Prime\";\n          dispatcher.clear();\n          cd.detectChanges();\n\n          expect(dispatcher.log).toEqual(['memo=Optimus Prime']);\n        });\n      });\n  });\n}\n\nclass CountingPipe extends Pipe {\n  state:number;\n\n  constructor() {\n    super();\n    this.state = 0;\n  }\n\n  supports(newValue) {\n    return true;\n  }\n\n  transform(value) {\n    return `${value} state:${this.state ++}`;\n  }\n}\n\nclass OncePipe extends Pipe {\n  called:boolean;\n  destroyCalled:boolean;\n\n  constructor() {\n    super();\n    this.called = false;;\n    this.destroyCalled = false;\n  }\n\n  supports(newValue) {\n    return !this.called;\n  }\n\n  onDestroy() {\n    this.destroyCalled = true;\n  }\n\n  transform(value) {\n    this.called = true;\n    return value;\n  }\n}\n\nclass IdentityPipe extends Pipe {\n  state:any;\n\n  supports(newValue) {\n    return true;\n  }\n\n  transform(value) {\n    if (this.state === value) {\n      return NO_CHANGE;\n    } else {\n      this.state = value;\n      return value;\n    }\n  }\n}\n\nclass FakePipeRegistry extends PipeRegistry {\n  numberOfLookups:number;\n  pipeType:string;\n  factory:Function;\n\n  constructor(pipeType, factory) {\n    super({});\n    this.pipeType = pipeType;\n    this.factory = factory;\n    this.numberOfLookups = 0;\n  }\n\n  get(type:string, obj) {\n    if (type != this.pipeType) return null;\n    this.numberOfLookups ++;\n    return this.factory();\n  }\n}\n\nclass TestRecord {\n  a;\n  b;\n  c;\n}\n\nclass Person {\n  name:string;\n  age:number;\n  address:Address;\n  constructor(name:string, address:Address = null) {\n    this.name = name;\n    this.address = address;\n  }\n\n  sayHi(m) {\n    return `Hi, ${m}`;\n  }\n\n  toString():string {\n    var address = this.address == null ? '' : ' address=' + this.address.toString();\n\n    return 'name=' + this.name + address;\n  }\n}\n\nclass Address {\n  city:string;\n  constructor(city:string) {\n    this.city = city;\n  }\n\n  toString():string {\n    return this.city;\n  }\n}\n\nclass Uninitialized {\n  value:any;\n}\n\nclass TestData {\n  a;\n\n  constructor(a) {\n    this.a = a;\n  }\n}\n\nclass TestDispatcher extends ChangeDispatcher {\n  log:List;\n  loggedValues:List;\n  changeRecords:List;\n  onChange:Function;\n\n  constructor() {\n    super();\n    this.log = null;\n    this.loggedValues = null;\n    this.onChange = (_, __) => {};\n    this.clear();\n  }\n\n  clear() {\n    this.log = ListWrapper.create();\n    this.loggedValues = ListWrapper.create();\n    this.changeRecords = ListWrapper.create();\n  }\n\n  logValue(value) {\n    ListWrapper.push(this.loggedValues, value);\n  }\n\n  onRecordChange(group, changeRecords:List) {\n    var value = changeRecords[0].change.currentValue;\n    var memento = changeRecords[0].bindingMemento;\n    ListWrapper.push(this.log, memento + '=' + this._asString(value));\n\n    var values = ListWrapper.map(changeRecords, (r) => r.change.currentValue);\n    ListWrapper.push(this.loggedValues, values);\n\n    ListWrapper.push(this.changeRecords, changeRecords);\n\n    this.onChange(group, changeRecords);\n  }\n\n\n  _asString(value) {\n    return (isBlank(value) ? 'null' : value.toString());\n  }\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","$traceurRuntime.superConstructor(\n          $__placeholder__0).apply(this, arguments)","assert.type.any","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","return assert.returnType(($__placeholder__0), $__placeholder__1)"]}