{"version":3,"sources":["@traceur/generated/TemplateParser/5368","angular2/test/forms/integration_spec.js","angular2/test/forms/@traceur/generated/TemplateParser/26","angular2/test/forms/@traceur/generated/TemplateParser/24","@traceur/generated/TemplateParser/5376","@traceur/generated/TemplateParser/5367","@traceur/generated/TemplateParser/5366","@traceur/generated/TemplateParser/5371","@traceur/generated/TemplateParser/5381","@traceur/generated/TemplateParser/5375","@traceur/generated/TemplateParser/5373","@traceur/generated/TemplateParser/5374","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"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","file":"angular2/test/forms/integration_spec.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {\n  afterEach,\n  AsyncTestCompleter,\n  beforeEach,\n  ddescribe,\n  describe,\n  dispatchEvent,\n  el,\n  expect,\n  iit,\n  inject,\n  it,\n  queryView,\n  xit\n} from 'angular2/test_lib';\nimport {DOM} from 'angular2/src/dom/dom_adapter';\n\nimport {Lexer, Parser, ChangeDetector, dynamicChangeDetection} from 'angular2/change_detection';\nimport {Compiler, CompilerCache} from 'angular2/src/core/compiler/compiler';\nimport {DirectiveMetadataReader} from 'angular2/src/core/compiler/directive_metadata_reader';\nimport {NativeShadowDomStrategy} from 'angular2/src/core/compiler/shadow_dom_strategy';\nimport {TemplateLoader} from 'angular2/src/core/compiler/template_loader';\nimport {ComponentUrlMapper} from 'angular2/src/core/compiler/component_url_mapper';\nimport {UrlResolver} from 'angular2/src/core/compiler/url_resolver';\nimport {StyleUrlResolver} from 'angular2/src/core/compiler/style_url_resolver';\nimport {CssProcessor} from 'angular2/src/core/compiler/css_processor';\n\nimport {MockTemplateResolver} from 'angular2/src/mock/template_resolver_mock';\n\nimport {Injector} from 'angular2/di';\n\nimport {Component, Decorator, Template} from 'angular2/angular2';\nimport {ControlGroupDirective, ControlDirective, Control, ControlGroup, OptionalControl,\n  ControlValueAccessor, RequiredValidatorDirective} from 'angular2/forms';\n\nimport * as validators from 'angular2/src/forms/validators';\n\nexport function main() {\n  function detectChanges(view) {\n    view.changeDetector.detectChanges();\n  }\n\n  function compile(componentType, template, context, callback) {\n    var tplResolver = new MockTemplateResolver();\n    var urlResolver = new UrlResolver();\n\n    var compiler = new Compiler(dynamicChangeDetection,\n      new TemplateLoader(null, null),\n      new DirectiveMetadataReader(),\n      new Parser(new Lexer()),\n      new CompilerCache(),\n      new NativeShadowDomStrategy(new StyleUrlResolver(urlResolver)),\n      tplResolver,\n      new ComponentUrlMapper(),\n      urlResolver,\n      new CssProcessor(null)\n    );\n\n    tplResolver.setTemplate(componentType, new Template({\n      inline: template,\n      directives: [ControlGroupDirective, ControlDirective, WrappedValue, RequiredValidatorDirective]\n    }));\n\n    compiler.compile(componentType).then((pv) => {\n      var view = pv.instantiate(null, null);\n      view.hydrate(new Injector([]), null, null, context, null);\n      detectChanges(view);\n      callback(view);\n    });\n  }\n\n  describe(\"integration tests\", () => {\n    it(\"should initialize DOM elements with the given form object\", inject([AsyncTestCompleter], (async) => {\n      var ctx = new MyComp(new ControlGroup({\n        \"login\": new Control(\"loginValue\")\n      }));\n\n      var t = `<div [control-group]=\"form\">\n                <input type=\"text\" control=\"login\">\n              </div>`;\n\n      compile(MyComp, t, ctx, (view) => {\n        var input = queryView(view, \"input\")\n        expect(input.value).toEqual(\"loginValue\");\n        async.done();\n      });\n    }));\n\n    if (DOM.supportsDOMEvents()) {\n      it(\"should update the control group values on DOM change\", inject([AsyncTestCompleter], (async) => {\n        var form = new ControlGroup({\n          \"login\": new Control(\"oldValue\")\n        });\n        var ctx = new MyComp(form);\n\n        var t = `<div [control-group]=\"form\">\n                  <input type=\"text\" control=\"login\">\n                </div>`;\n\n        compile(MyComp, t, ctx, (view) => {\n          var input = queryView(view, \"input\")\n\n          input.value = \"updatedValue\";\n          dispatchEvent(input, \"change\");\n\n          expect(form.value).toEqual({\"login\": \"updatedValue\"});\n          async.done();\n        });\n      }));\n    }\n\n    it(\"should update DOM elements when rebinding the control group\", inject([AsyncTestCompleter], (async) => {\n      var form = new ControlGroup({\n        \"login\": new Control(\"oldValue\")\n      });\n      var ctx = new MyComp(form);\n\n      var t = `<div [control-group]=\"form\">\n                <input type=\"text\" control=\"login\">\n              </div>`;\n\n      compile(MyComp, t, ctx, (view) => {\n        ctx.form = new ControlGroup({\n          \"login\": new Control(\"newValue\")\n        });\n        detectChanges(view);\n\n        var input = queryView(view, \"input\")\n        expect(input.value).toEqual(\"newValue\");\n        async.done();\n      });\n    }));\n\n    it(\"should update DOM element when rebinding the control name\", inject([AsyncTestCompleter], (async) => {\n      var ctx = new MyComp(new ControlGroup({\n        \"one\": new Control(\"one\"),\n        \"two\": new Control(\"two\")\n      }), \"one\");\n\n      var t = `<div [control-group]=\"form\">\n                <input type=\"text\" [control]=\"name\">\n              </div>`;\n\n      compile(MyComp, t, ctx, (view) => {\n        var input = queryView(view, \"input\")\n        expect(input.value).toEqual(\"one\");\n\n        ctx.name = \"two\";\n        detectChanges(view);\n\n        expect(input.value).toEqual(\"two\");\n        async.done();\n      });\n    }));\n\n    if (DOM.supportsDOMEvents()) {\n      describe(\"different control types\", () => {\n        it(\"should support type=checkbox\", inject([AsyncTestCompleter], (async) => {\n          var ctx = new MyComp(new ControlGroup({\"checkbox\": new Control(true)}));\n\n          var t = `<div [control-group]=\"form\">\n                    <input type=\"checkbox\" control=\"checkbox\">\n                  </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var input = queryView(view, \"input\")\n            expect(input.checked).toBe(true);\n\n            input.checked = false;\n            dispatchEvent(input, \"change\");\n\n            expect(ctx.form.value).toEqual({\"checkbox\" : false});\n            async.done();\n          });\n        }));\n\n        it(\"should support textarea\", inject([AsyncTestCompleter], (async) => {\n          var ctx = new MyComp(new ControlGroup({\"text\": new Control('old')}));\n\n          var t = `<div [control-group]=\"form\">\n                    <textarea control=\"text\"></textarea>\n                  </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var textarea = queryView(view, \"textarea\")\n            expect(textarea.value).toEqual(\"old\");\n\n            textarea.value = \"new\";\n            dispatchEvent(textarea, \"change\");\n\n            expect(ctx.form.value).toEqual({\"text\" : 'new'});\n            async.done();\n          });\n        }));\n\n        it(\"should support select\", inject([AsyncTestCompleter], (async) => {\n          var ctx = new MyComp(new ControlGroup({\"city\": new Control(\"SF\")}));\n\n          var t = `<div [control-group]=\"form\">\n                      <select control=\"city\">\n                        <option value=\"SF\"></option>\n                        <option value=\"NYC\"></option>\n                      </select>\n                    </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var select = queryView(view, \"select\")\n            var sfOption = queryView(view, \"option\")\n            expect(select.value).toEqual('SF');\n            expect(sfOption.selected).toBe(true);\n\n            select.value = 'NYC';\n            dispatchEvent(select, \"change\");\n\n            expect(ctx.form.value).toEqual({\"city\" : 'NYC'});\n            expect(sfOption.selected).toBe(false);\n            async.done();\n          });\n        }));\n\n        it(\"should support custom value accessors\", inject([AsyncTestCompleter], (async) => {\n          var ctx = new MyComp(new ControlGroup({\"name\": new Control(\"aa\")}));\n\n          var t = `<div [control-group]=\"form\">\n                    <input type=\"text\" control=\"name\" wrapped-value>\n                  </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var input = queryView(view, \"input\")\n            expect(input.value).toEqual(\"!aa!\");\n\n            input.value = \"!bb!\";\n            dispatchEvent(input, \"change\");\n\n            expect(ctx.form.value).toEqual({\"name\" : \"bb\"});\n            async.done();\n          });\n        }));\n      });\n\n      describe(\"validations\", () => {\n        it(\"should use validators defined in html\", inject([AsyncTestCompleter], (async) => {\n          var form = new ControlGroup({\"login\": new Control(\"aa\")});\n          var ctx = new MyComp(form);\n\n          var t = `<div [control-group]=\"form\">\n                    <input type=\"text\" control=\"login\" required>\n                   </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            expect(form.valid).toEqual(true);\n\n            var input = queryView(view, \"input\");\n\n            input.value = \"\";\n            dispatchEvent(input, \"change\");\n\n            expect(form.valid).toEqual(false);\n            async.done();\n          });\n        }));\n\n        it(\"should use validators defined in the model\", inject([AsyncTestCompleter], (async) => {\n          var form = new ControlGroup({\"login\": new Control(\"aa\", validators.required)});\n          var ctx = new MyComp(form);\n\n          var t = `<div [control-group]=\"form\">\n                    <input type=\"text\" control=\"login\">\n                   </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            expect(form.valid).toEqual(true);\n\n            var input = queryView(view, \"input\");\n\n            input.value = \"\";\n            dispatchEvent(input, \"change\");\n\n            expect(form.valid).toEqual(false);\n            async.done();\n          });\n        }));\n      });\n    }\n\n    describe(\"nested forms\", () => {\n      it(\"should init DOM with the given form object\",inject([AsyncTestCompleter], (async) => {\n        var form = new ControlGroup({\n          \"nested\": new ControlGroup({\n            \"login\": new Control(\"value\")\n          })\n        });\n        var ctx = new MyComp(form);\n\n        var t = `<div [control-group]=\"form\">\n                    <div control-group=\"nested\">\n                      <input type=\"text\" control=\"login\">\n                    </div>\n                </div>`;\n\n        compile(MyComp, t, ctx, (view) => {\n          var input = queryView(view, \"input\")\n          expect(input.value).toEqual(\"value\");\n          async.done();\n        });\n      }));\n\n      if (DOM.supportsDOMEvents()) {\n        it(\"should update the control group values on DOM change\", inject([AsyncTestCompleter], (async) => {\n          var form = new ControlGroup({\n            \"nested\": new ControlGroup({\n              \"login\": new Control(\"value\")\n            })\n          });\n          var ctx = new MyComp(form);\n\n          var t = `<div [control-group]=\"form\">\n                      <div control-group=\"nested\">\n                        <input type=\"text\" control=\"login\">\n                      </div>\n                  </div>`;\n\n          compile(MyComp, t, ctx, (view) => {\n            var input = queryView(view, \"input\")\n\n            input.value = \"updatedValue\";\n            dispatchEvent(input, \"change\");\n\n            expect(form.value).toEqual({\"nested\" : {\"login\" : \"updatedValue\"}});\n            async.done();\n          });\n        }));\n      }\n    });\n  });\n}\n\n@Component({\n  selector: \"my-comp\"\n})\nclass MyComp {\n  form:ControlGroup;\n  name:string;\n\n  constructor(form = null, name = null) {\n    this.form = form;\n    this.name = name;\n  }\n}\n\nclass WrappedValueAccessor extends ControlValueAccessor {\n  readValue(el){\n    return el.value.substring(1, el.value.length - 1);\n  }\n\n  writeValue(el, value):void {\n    el.value = `!${value}!`;\n  }\n}\n\n@Decorator({\n  selector:'[wrapped-value]'\n})\nclass WrappedValue {\n  constructor(cd:ControlDirective) {\n    cd.valueAccessor = new WrappedValueAccessor();\n  }\n}\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.argumentTypes($__placeholder__0)","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__m;","$__placeholder__0 = $__placeholder__1","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor(\n          $__placeholder__0).apply(this, arguments)"]}